{"version":3,"sources":["components/Spinner/SpinnerReducer.js","utils/toasterActions.js","utils/APIManager.js","reducers/RootReducer.js","components/DriversGrid/DriversGrid.js","components/TasksGrid/TasksGrid.js","components/Spinner/Spinner.js","App.js","index.js"],"names":["initialState","isSpinnerOn","usersSpinner","reducer","state","action","type","success","notification","message","placement","APIManager","taskId","driverId","ROOT","drivers","driversMap","tasksMap","tasks","assignTaskToDriver","dispatch","axios","put","then","data","catch","window","alert","newTasksMap","assignTo","assignToName","name","selectedDriverId","selectedTaskId","columns","title","dataIndex","key","DriversGrid","useDispatch","setSelectedDriverId","useCallback","rootActions","useSelector","root","res","toasterActions","className","dataSource","pagination","rowClassName","record","index","id","onRow","rowIndex","onClick","event","render","text","row","lineDisplayId","TasksGrid","setSelectedTaskId","lineId","Spinner","spinner","App","useEffect","Promise","all","get","getDrivers","getTasks","resArr","forEach","task","driver","err","style","height","span","overflowY","borderRight","borderLeft","rootReducer","combineReducers","SpinnerReducer","RootReducer","store","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.77fa92aa.chunk.js","sourcesContent":["\n\nconst initialState = {\n  isSpinnerOn: true,\n  usersSpinner: 0,\n}\n\nexport const turnOnSpinner = () => dispatch =>\n\n  dispatch({\n      type: 'TURN_ON_SPINNER',\n  });\n\nexport const turnOffSpinner = () => dispatch => \n  dispatch({\n      type: 'TURN_OFF_SPINNER'\n  });\n\nconst reducer = (state = initialState, action) => {\n\tswitch (action.type) {\n\t\tcase 'TURN_ON_SPINNER': {\n\t\t\treturn {\n        ...state,\n        usersSpinner: state.usersSpinner + 1,\n\t\t\t}\n    }\n        \n\t\tcase 'TURN_OFF_SPINNER': {\n\t\t\treturn {\n        ...state,\n        usersSpinner: (state.usersSpinner - 1) >= 0 ? (state.usersSpinner - 1) : 0,\n\t\t\t}\n    }\n\n    default: {\n\t\t\treturn state;\n\t\t}\n  }\n}\n\nexport default reducer","import { notification } from 'antd'\r\n\r\nexport const success = () => {\r\n  notification.success({\r\n    message: `Assigment succeeded`,\r\n    placement: 'bottomRight'\r\n  });\r\n}","\nclass APIManager {\n    static ROOT = 'http://localhost:8080';\n\n    static get getDrivers() {\n      return `${APIManager.ROOT}/drivers`;\n    }\n\n    static get getTasks() {\n      return `${APIManager.ROOT}/tasks`;\n    }\n     \n    \n\n    static assignTaskToDriver(taskId, driverId) {\n      return `${APIManager.ROOT}/tasks/${taskId}/assign?driverId=${driverId}`;\n    }\n  }\n  \n  export default APIManager;\n  ","import axios from 'axios';\r\nimport APIManager from '../utils/APIManager';\r\n\r\nconst initialState = {\r\n    drivers: [],\r\n    driversMap: {},\r\n    tasksMap: {},\r\n    tasks: []\r\n}\r\n\r\nexport const getAllData = () => dispatch => {\r\n\treturn Promise.all([axios.get(APIManager.getDrivers), axios.get(APIManager.getTasks)])\r\n\t\t.then((resArr) => {\r\n\t\t\tconst tasks = resArr[1].data;\r\n\t\t\tconst drivers = resArr[0].data;\r\n\t\t\tconst tasksMap = {};\r\n\t\t\tconst driversMap = {};\r\n\t\t\ttasks.forEach(task => {\r\n\t\t\t\ttasksMap[task.lineId] = task;\r\n\t\t\t});\r\n\t\t\tdrivers.forEach(driver => {\r\n\t\t\t\tdriversMap[driver.id] = driver;\r\n\t\t\t});\r\n\t\t\ttasks.forEach(task => {\r\n\t\t\t\tif (task.assignTo) {\r\n\t\t\t\t\ttask.assignToName = driversMap[task.assignTo].name\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: 'INIT_DATA',\r\n\t\t\t\tdata: {\r\n\t\t\t\t\tdrivers: drivers,\r\n\t\t\t\t\ttasks: tasks,\r\n\t\t\t\t\ttasksMap: tasksMap,\r\n\t\t\t\t\tdriversMap: driversMap\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\twindow.alert(\"Error from server\");\r\n\t\t\treturn 'error';\r\n\t\t})\r\n}\r\n\r\nexport const assignTaskToDriver = (taskId, driverId) => dispatch => {\r\n\treturn axios.put(APIManager.assignTaskToDriver(taskId, driverId))\r\n\t\t.then(() => {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: 'UPDATE_TASKS',\r\n\t\t\t\tdata: {\r\n\t\t\t\t\ttaskId,\r\n\t\t\t\t\tdriverId\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t})\r\n\t\t.catch(() => {\r\n\t\t\twindow.alert(\"Error from server\");\r\n\t\t\treturn 'error';\r\n\t\t})\r\n}\r\n\r\nexport const setSelectedDriverId = (selectedDriverId) => dispatch => dispatch({\r\n\ttype: 'SET_SELECTED_DRIVER_ID',\r\n\tdata: {\r\n\t\tselectedDriverId\r\n\t}\r\n})\r\n\r\nexport const clearSelected = () => dispatch => dispatch({\r\n\ttype: 'CLEAR_SELECTED',\r\n})\r\n\r\nexport const setSelectedTaskId = (selectedTaskId) => dispatch => dispatch({\r\n\ttype: 'SET_SELECTED_TASK_ID',\r\n\tdata: {\r\n\t\tselectedTaskId\r\n\t}\r\n})\r\n\r\nconst reducer = (state = initialState, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase 'INIT_DATA': {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tdrivers: action.data.drivers,\r\n\t\t\t\ttasks: action.data.tasks,\r\n\t\t\t\ttasksMap: action.data.tasksMap,\r\n\t\t\t\tdriversMap: action.data.driversMap\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tcase 'UPDATE_TASKS': {\r\n\t\t\tconst newTasksMap = {\r\n\t\t\t\t...state.tasksMap\r\n\t\t\t};\r\n\t\t\tnewTasksMap[action.data.taskId].assignTo = action.data.driverId;\r\n\t\t\tnewTasksMap[action.data.taskId].assignToName = state.driversMap[action.data.driverId].name;\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\ttasksMap: newTasksMap,\r\n\t\t\t\ttasks: [...state.tasks]\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tcase 'CLEAR_SELECTED': {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tselectedDriverId: null,\r\n\t\t\t\tselectedTaskId: null,\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tcase 'SET_SELECTED_DRIVER_ID': {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tselectedDriverId: action.data.selectedDriverId\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tcase 'SET_SELECTED_TASK_ID': {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tselectedTaskId: action.data.selectedTaskId\r\n\t\t\t}\r\n\t\t}\r\n        \r\n\t\tdefault: {\r\n\t\t\treturn state;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default reducer;","import { useSelector, useDispatch } from 'react-redux';\r\nimport React, { useCallback } from 'react';\r\nimport * as spinnerActions from '../../components/Spinner/SpinnerReducer';\r\nimport * as toasterActions from '../../utils/toasterActions';\r\nimport {\r\n\tTable\r\n} from 'antd';\r\nimport * as rootActions from '../../reducers/RootReducer';\r\nimport './DriversGrid.scss';\r\nconst columns = [\r\n    {\r\n      title: 'Name',\r\n      dataIndex: 'name',\r\n      key: 'name',\r\n    },\r\n    {\r\n      title: 'Id',\r\n      dataIndex: 'id',\r\n      key: 'id',\r\n    },\r\n  ];\r\n\r\n\r\nconst DriversGrid = () => {\r\n  const dispatch = useDispatch();\r\n  const setSelectedDriverId = useCallback((driverId) => {\r\n    dispatch(rootActions.setSelectedDriverId(driverId));\r\n  }, []);\r\n  const drivers = useSelector(state => state.root.drivers);\r\n  const selectedDriverId = useSelector(state => state.root.selectedDriverId);\r\n  const selectedTaskId = useSelector(state => state.root.selectedTaskId);\r\n  const assignTaskToDriver = useCallback((taskId, driverId) => {\r\n    dispatch(spinnerActions.turnOnSpinner());\r\n    dispatch(rootActions.assignTaskToDriver(taskId, driverId))\r\n    .then((res) => {\r\n        dispatch(spinnerActions.turnOffSpinner());\r\n        if (res != 'error') {\r\n          toasterActions.success();\r\n          dispatch(rootActions.clearSelected());\r\n        }\r\n      });\r\n  }, []);\r\n  return (\r\n    <div className=\"DriversGrid\">\r\n      <Table \r\n        columns={columns} \r\n        dataSource={drivers}\r\n        pagination={false}\r\n        rowClassName={(record, index) => \r\n          `driver-row ${record.id == selectedDriverId ? 'selected-row': ''}`\r\n        }\r\n        onRow={(record, rowIndex) => {\r\n          return {\r\n            onClick: event => {\r\n              setSelectedDriverId(record.id);\r\n              if (selectedTaskId) {\r\n                assignTaskToDriver(selectedTaskId, record.id);\r\n              }\r\n            }\r\n          };\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DriversGrid;\r\n\r\n","import { useSelector, useDispatch } from 'react-redux';\r\nimport React, { useCallback } from 'react';\r\nimport * as spinnerActions from '../../components/Spinner/SpinnerReducer';\r\nimport * as toasterActions from '../../utils/toasterActions';\r\nimport {\r\n\tTable\r\n} from 'antd';\r\nimport * as rootActions from '../../reducers/RootReducer';\r\nimport './TasksGrid.scss';\r\n\r\n\r\nconst columns = [\r\n  {\r\n    title: 'Driver',\r\n    dataIndex: 'assignTo',\r\n    key: 'assignTo',\r\n    render: (text, row, index) => {\r\n      if (!row.assignTo) {\r\n        return (<span className='assign-cell'>+ Driver</span>);\r\n      } else {\r\n        return row.assignToName;\r\n      }\r\n\r\n    }\r\n  },\r\n  {\r\n    title: 'Task Id',\r\n    dataIndex: 'lineId',\r\n    key: 'lineId',\r\n    render: (text, row, index) => {\r\n      return row.lineDisplayId;\r\n    }\r\n  },\r\n  {\r\n    title: 'Day 1',\r\n    render: (text, record, index) => {\r\n      return record.tasks[0].type\r\n    }\r\n  },\r\n  {\r\n    title: 'Day 2',\r\n    render: (text, record, index) => {\r\n      return record.tasks[1].type\r\n    }\r\n  },\r\n  {\r\n    title: 'Day 3',\r\n    render: (text, record, index) => {\r\n      return record.tasks[2].type\r\n    }\r\n  },\r\n  {\r\n    title: 'Day 4',\r\n    render: (text, record, index) => {\r\n      return record.tasks[3].type\r\n    }\r\n  },\r\n  {\r\n    title: 'Day 5',\r\n    render: (text, record, index) => {\r\n      return record.tasks[4].type\r\n    }\r\n  },\r\n  {\r\n    title: 'Day 6',\r\n    render: (text, record, index) => {\r\n      return record.tasks[5].type\r\n    }\r\n  },\r\n  {\r\n    title: 'Day 7',\r\n    render: (text, record, index) => {\r\n      return record.tasks[6].type\r\n    }\r\n  }\r\n];\r\n\r\nconst TasksGrid = () => {\r\n  const dispatch = useDispatch();\r\n  const setSelectedTaskId = useCallback((taskId) => {\r\n    dispatch(rootActions.setSelectedTaskId(taskId));\r\n  });\r\n  const assignTaskToDriver = useCallback((taskId, driverId) => {\r\n    dispatch(spinnerActions.turnOnSpinner());\r\n    dispatch(rootActions.assignTaskToDriver(taskId, driverId))\r\n    .then((res) => {\r\n        dispatch(spinnerActions.turnOffSpinner());\r\n        if (res != 'error') {\r\n          toasterActions.success();\r\n          dispatch(rootActions.clearSelected());\r\n\r\n        }\r\n      });\r\n  });\r\n  const tasks = useSelector(state => state.root.tasks);\r\n  const selectedTaskId = useSelector(state => state.root.selectedTaskId);\r\n  const selectedDriverId = useSelector(state => state.root.selectedDriverId);\r\n\r\n  return (\r\n    <div className=\"TasksGrid\">\r\n      <Table \r\n        columns={columns} \r\n        dataSource={tasks}\r\n        pagination={false}\r\n        rowClassName={(record, index) => \r\n          `task-row ${record.lineId == selectedTaskId ? 'selected-row': ''}`\r\n        }\r\n        onRow={(record, rowIndex) => {\r\n          return {\r\n            onClick: event => {\r\n              setSelectedTaskId(record.lineId)\r\n              if (selectedDriverId) {\r\n                assignTaskToDriver(record.lineId, selectedDriverId);\r\n              }\r\n            }\r\n          };\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TasksGrid;\r\n","import React from 'react';\nimport { \n    Spin\n} from 'antd';\nimport { useSelector } from 'react-redux';\nimport './Spinner.scss';\n\nconst Spinner = () => {\n  const usersSpinner = useSelector(state => state.spinner.usersSpinner);\n\n  return (\n    <div className={\"spinner-wrapper \" + (usersSpinner ? \"show-spinner\" : \"hide-spinner\")}>\n      <div className=\"spinner\">\n        <Spin />\n      </div>\n    </div>\n  );\n\n}\n\n\nexport default Spinner;\n","import './App.css';\nimport DriversGrid from './components/DriversGrid/DriversGrid';\nimport TasksGrid from './components/TasksGrid/TasksGrid';\nimport Spinner from './components/Spinner/Spinner';\nimport * as spinnerActions from './components/Spinner/SpinnerReducer';\nimport * as rootActions from './reducers/RootReducer';\nimport { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport {\n  Layout,\n  Row,\n  Col,\n  Switch\n} from 'antd';\n\nconst App = () => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(spinnerActions.turnOnSpinner());\n    dispatch(rootActions.getAllData())\n    .then(() => {\n        dispatch(spinnerActions.turnOffSpinner());\n      });\n  }, []); \n  return (\n    <div className=\"App\">\n      <Spinner></Spinner>\n        <Row type=\"flex\" style={{height: '100vh'}}>\n          <Col \n            span={6} \n            style={{height: '100%', overflowY: 'scroll', borderRight: '2px solid'}}>\n            <DriversGrid />\n          </Col>\n          <Col \n            span={18} \n            style={{height: '100%', overflowY: 'scroll', borderLeft: '2px solid'}}>\n            <TasksGrid />\n          </Col>\n        </Row>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport SpinnerReducer from './components/Spinner/SpinnerReducer';\nimport RootReducer from './reducers/RootReducer';\n\nconst rootReducer = combineReducers({\n  'spinner': SpinnerReducer,\n  'root': RootReducer,\n});\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunk)\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}